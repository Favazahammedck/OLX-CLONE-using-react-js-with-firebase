{"ast":null,"code":"'use strict';\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar readdirp = require('readdirp');\n\nvar handlebars = require('handlebars');\n\nvar resolver = require('./resolver');\n\nvar _ = require('lodash');\n/**\n * Regex pattern for layout directive. {{!< layout }}\n */\n\n\nvar layoutPattern = /{{!<\\s+([A-Za-z0-9\\._\\-\\/]+)\\s*}}/;\n/**\n * Constructor\n */\n\nvar ExpressHbs = function () {\n  this.handlebars = handlebars.create();\n  this.SafeString = this.handlebars.SafeString;\n  this.Utils = this.handlebars.Utils;\n  this.beautify = null;\n  this.beautifyrc = null;\n  this.cwd = process.cwd();\n};\n/**\n * Defines content for a named block declared in layout.\n *\n * @example\n *\n * {{#contentFor \"pageStylesheets\"}}\n * <link rel=\"stylesheet\" href='{{{URL \"css/style.css\"}}}' />\n * {{/contentFor}}\n */\n\n\nExpressHbs.prototype.content = function (name, options, context) {\n  var block = options.data.root.blockCache[name] || (options.data.root.blockCache[name] = []);\n  block.push(options.fn(context));\n};\n/**\n * Returns the layout filepath given the template filename and layout used.\n * Backward compatible with specifying layouts in locals like 'layouts/foo',\n * but if you have specified a layoutsDir you can specify layouts in locals with just the layout name.\n *\n * @param {String} filename Path to template file.\n * @param {String} layout Layout path.\n */\n\n\nExpressHbs.prototype.layoutPath = function (filename, layout) {\n  var dirs, layoutPath;\n\n  if (layout[0] === '.') {\n    dirs = path.dirname(filename);\n  } else if (this.layoutsDir) {\n    dirs = this.layoutsDir;\n  } else {\n    dirs = this.viewsDir;\n  }\n\n  [].concat(dirs).forEach(function (dir) {\n    if (!layoutPath) {\n      layoutPath = path.resolve(dir, layout);\n    }\n  });\n  return layoutPath;\n};\n/**\n * Find the path of the declared layout in `str`, if any\n *\n * @param  {String} str The template string to parse\n * @param {String} filename Path to template\n * @returns {String|undefined} Returns the path to layout.\n */\n\n\nExpressHbs.prototype.declaredLayoutFile = function (str, filename) {\n  var matches = str.match(layoutPattern);\n\n  if (matches) {\n    var layout = matches[1]; // behave like `require`, if '.' then relative, else look in\n    // usual location (layoutsDir)\n\n    if (this.layoutsDir && layout[0] !== '.') {\n      layout = path.resolve(this.layoutsDir, layout);\n    }\n\n    return path.resolve(path.dirname(filename), layout);\n  }\n};\n/**\n * Compiles a layout file.\n *\n * The function checks whether the layout file declares a parent layout.\n * If it does, the parent layout is loaded recursively and checked as well\n * for a parent layout, and so on, until the top layout is reached.\n * All layouts are then returned as a stack to the caller via the callback.\n *\n * @param {String}      layoutFile  The path to the layout file to compile\n * @param {Boolean}     useCache    Cache the compiled layout?\n * @param {Function}    cb          Callback called with layouts stack\n */\n\n\nExpressHbs.prototype.cacheLayout = function (layoutFile, useCache, cb) {\n  var self = this; // assume hbs extension\n\n  if (path.extname(layoutFile) === '') layoutFile += this._options.extname; // path is relative in directive, make it absolute\n\n  var layoutTemplates = this.cache[layoutFile];\n  if (layoutTemplates) return cb(null, layoutTemplates);\n  fs.readFile(layoutFile, 'utf8', function (err, str) {\n    if (err) return cb(err); //  File path of eventual declared parent layout\n\n    var parentLayoutFile = self.declaredLayoutFile(str, layoutFile); // This function returns the current layout stack to the caller\n\n    var _returnLayouts = function (layouts) {\n      var currentLayout;\n      layouts = layouts.slice(0);\n      currentLayout = self.compile(str, layoutFile);\n      layouts.push(currentLayout);\n\n      if (useCache) {\n        self.cache[layoutFile] = layouts.slice(0);\n      }\n\n      cb(null, layouts);\n    };\n\n    if (parentLayoutFile) {\n      // Recursively compile/cache parent layouts\n      self.cacheLayout(parentLayoutFile, useCache, function (err, parentLayouts) {\n        if (err) return cb(err);\n\n        _returnLayouts(parentLayouts);\n      });\n    } else {\n      // No parent layout: return current layout with an empty stack\n      _returnLayouts([]);\n    }\n  });\n};\n/**\n * Cache partial templates found under directories configure in partialsDir.\n */\n\n\nExpressHbs.prototype.cachePartials = function (cb) {\n  var self = this;\n\n  if (!(this.partialsDir instanceof Array)) {\n    this.partialsDir = [this.partialsDir];\n  } // Use to iterate all folder in series\n\n\n  var count = 0;\n\n  function readNext() {\n    readdirp(self.partialsDir[count], {\n      fileFilter: '*' + self._options.extname\n    }).on('warn', function (err) {\n      console.warn('Non-fatal error in express-hbs cachePartials.', err);\n    }).on('error', function (err) {\n      console.error('Fatal error in express-hbs cachePartials', err);\n      return cb(err);\n    }).on('data', function (entry) {\n      if (!entry) return;\n      var source = fs.readFileSync(entry.fullPath, 'utf8');\n      var dirname = path.dirname(entry.path);\n      dirname = dirname === '.' ? '' : dirname + '/';\n      var name = dirname + path.basename(entry.basename, self._options.extname); // fix the path in windows\n\n      name = name.split('\\\\').join('/');\n      self.registerPartial(name, source, entry.fullPath);\n    }).on('end', function () {\n      count += 1; // If all directories aren't read, read the next directory\n\n      if (count < self.partialsDir.length) {\n        readNext();\n      } else {\n        self.isPartialCachingComplete = true;\n        if (cb) cb(null, true);\n      }\n    });\n  }\n\n  readNext();\n};\n/**\n * Express 3.x template engine compliance.\n *\n * @param {Object} options = {\n *   handlebars: \"override handlebars\",\n *   defaultLayout: \"path to default layout\",\n *   partialsDir: \"absolute path to partials (one path or an array of paths)\",\n *   layoutsDir: \"absolute path to the layouts\",\n *   extname: \"extension to use\",\n *   contentHelperName: \"contentFor\",\n *   blockHelperName: \"block\",\n *   beautify: \"{Boolean} whether to pretty print HTML\",\n *   onCompile: function(self, source, filename) {\n *       return self.handlebars.compile(source);\n *   }\n * }\n */\n\n\nExpressHbs.prototype.express3 = function (options) {\n  var self = this; // Set defaults\n\n  if (!options) options = {};\n  if (!options.extname) options.extname = '.hbs';\n  if (!options.contentHelperName) options.contentHelperName = 'contentFor';\n  if (!options.blockHelperName) options.blockHelperName = 'block';\n  if (!options.templateOptions) options.templateOptions = {};\n  if (options.handlebars) this.handlebars = options.handlebars;\n  if (options.onCompile) this.onCompile = options.onCompile;\n  this._options = options;\n  if (this._options.handlebars) this.handlebars = this._options.handlebars;\n\n  if (options.i18n) {\n    var i18n = options.i18n;\n    this.handlebars.registerHelper('__', function () {\n      var args = Array.prototype.slice.call(arguments);\n      var options = args.pop();\n      return i18n.__.apply(options.data.root, args);\n    });\n    this.handlebars.registerHelper('__n', function () {\n      var args = Array.prototype.slice.call(arguments);\n      var options = args.pop();\n      return i18n.__n.apply(options.data.root, args);\n    });\n  }\n\n  this.handlebars.registerHelper(this._options.blockHelperName, function (name, options) {\n    var val = options.data.root.blockCache[name];\n\n    if (val === undefined && typeof options.fn === 'function') {\n      val = options.fn(this);\n    }\n\n    if (Array.isArray(val)) {\n      val = val.join('\\n');\n    }\n\n    return val;\n  }); // Pass 'this' as context of helper function to don't lose context call of helpers.\n\n  this.handlebars.registerHelper(this._options.contentHelperName, function (name, options) {\n    return self.content(name, options, this);\n  }); // Absolute path to partials directory.\n\n  this.partialsDir = this._options.partialsDir; // Absolute path to the layouts directory\n\n  this.layoutsDir = this._options.layoutsDir; // express passes this through ___express func, gulp pass in an option\n\n  this.viewsDir = null;\n  this.viewsDirOpt = this._options.viewsDir; // Cache for templates, express 3.x doesn't do this for us\n\n  this.cache = {}; // Holds the default compiled layout if specified in options configuration.\n\n  this.defaultLayoutTemplates = null; // Keep track of if partials have been cached already or not.\n\n  this.isPartialCachingComplete = false;\n  return this.___express.bind(this);\n};\n/**\n * Express 4.x template engine compliance.\n *\n * @param {Object} options = {\n *   handlebars: \"override handlebars\",\n *   defaultLayout: \"path to default layout\",\n *   partialsDir: \"absolute path to partials (one path or an array of paths)\",\n *   layoutsDir: \"absolute path to the layouts\",\n *   extname: \"extension to use\",\n *   contentHelperName: \"contentFor\",\n *   blockHelperName: \"block\",\n *   beautify: \"{Boolean} whether to pretty print HTML\"\n * }\n */\n\n\nExpressHbs.prototype.express4 = ExpressHbs.prototype.express3;\n/**\n * Tries to load the default layout.\n *\n * @param {Boolean} useCache Whether to cache.\n */\n\nExpressHbs.prototype.loadDefaultLayout = function (useCache, cb) {\n  var self = this;\n  if (!this._options.defaultLayout) return cb();\n  if (useCache && this.defaultLayoutTemplates) return cb(null, this.defaultLayoutTemplates);\n  this.cacheLayout(this._options.defaultLayout, useCache, function (err, templates) {\n    if (err) return cb(err);\n    self.defaultLayoutTemplates = templates.slice(0);\n    return cb(null, templates);\n  });\n};\n/**\n * Expose useful methods.\n */\n\n\nExpressHbs.prototype.registerHelper = function (name, fn) {\n  this.handlebars.registerHelper(name, fn);\n};\n/**\n * Registers a partial.\n *\n * @param {String} name The name of the partial as used in a template.\n * @param {String} source String source of the partial.\n */\n\n\nExpressHbs.prototype.registerPartial = function (name, source, filename) {\n  this.handlebars.registerPartial(name, this.compile(source, filename));\n};\n/**\n * Compiles a string.\n *\n * @param {String} source The source to compile.\n * @param {String} filename The path used to embed into __filename for errors.\n */\n\n\nExpressHbs.prototype.compile = function (source, filename) {\n  // Handlebars has a bug with comment only partial causes errors. This must\n  // be a string so the block below can add a space.\n  if (typeof source !== 'string') {\n    throw new Error('registerPartial must be a string for empty comment workaround');\n  }\n\n  if (source.indexOf('}}') === source.length - 2) {\n    source += ' ';\n  }\n\n  var compiled;\n\n  if (this.onCompile) {\n    compiled = this.onCompile(this, source, filename);\n  } else {\n    compiled = this.handlebars.compile(source);\n  }\n\n  if (filename) {\n    if (Array.isArray(this.viewsDir) && this.viewsDir.length > 0) {\n      compiled.__filename = path.relative(this.cwd, filename).replace(path.sep, '/');\n    } else {\n      compiled.__filename = path.relative(this.viewsDir || '', filename).replace(path.sep, '/');\n    }\n  }\n\n  return compiled;\n};\n/**\n * Registers an asynchronous helper.\n *\n * @param {String} name The name of the partial as used in a template.\n * @param {String} fn The `function(options, cb)`\n */\n\n\nExpressHbs.prototype.registerAsyncHelper = function (name, fn) {\n  this.handlebars.registerHelper(name, function (context, options) {\n    var resolverCache = this.resolverCache || _.get(context, 'data.root.resolverCache') || _.get(options, 'data.root.resolverCache');\n\n    if (!resolverCache) {\n      throw new Error('Could not find resolver cache in async helper ' + name + '.');\n    }\n\n    if (options && fn.length > 2) {\n      var resolveFunc = function (arr, cb) {\n        return fn.call(this, arr[0], arr[1], cb);\n      };\n\n      return resolver.resolve(resolverCache, resolveFunc.bind(this), [context, options]);\n    }\n\n    return resolver.resolve(resolverCache, fn.bind(this), context);\n  });\n};\n\nExpressHbs.prototype.getTemplateOptions = function () {\n  return this._options.templateOptions;\n};\n\nExpressHbs.prototype.updateTemplateOptions = function (templateOptions) {\n  this._options.templateOptions = templateOptions;\n};\n\nExpressHbs.prototype.getLocalTemplateOptions = function (locals) {\n  return locals._templateOptions || {};\n};\n\nExpressHbs.prototype.updateLocalTemplateOptions = function (locals, localTemplateOptions) {\n  return locals._templateOptions = localTemplateOptions;\n};\n/**\n * Creates a new instance of ExpressHbs.\n */\n\n\nExpressHbs.prototype.create = function () {\n  return new ExpressHbs();\n};\n/**\n * express 3.x, 4.x template engine compliance\n *\n * @param {String} filename Full path to template.\n * @param {Object} options Is the context or locals for templates. {\n *  {Object} settings - subset of Express settings, `settings.views` is\n *                      the views directory\n * }\n * @param {Function} cb The callback expecting the rendered template as a string.\n *\n * @example\n *\n * Example options from express\n *\n *      {\n *        settings: {\n *           'x-powered-by': true,\n *           env: 'production',\n *           views: '/home/coder/barc/code/express-hbs/example/views',\n *           'jsonp callback name': 'callback',\n *           'view cache': true,\n *           'view engine': 'hbs'\n *         },\n *         cache: true,\n *\n *         // the rest are app-defined locals\n *         title: 'My favorite veggies',\n *         layout: 'layout/veggie'\n *       }\n */\n\n\nExpressHbs.prototype.___express = function ___express(filename, source, options, cb) {\n  // support running as a gulp/grunt filter outside of express\n  if (arguments.length === 3) {\n    cb = options;\n    options = source;\n    source = null;\n  }\n\n  options.blockCache = {};\n  options.resolverCache = {};\n  this.viewsDir = options.settings.views || this.viewsDirOpt;\n  var self = this;\n  /**\n   * Allow a layout to be declared as a handlebars comment to remain spec\n   * compatible with handlebars.\n   *\n   * Valid directives\n   *\n   *  {{!< foo}}                      # foo.hbs in same directory as template\n   *  {{!< ../layouts/default}}       # default.hbs in parent layout directory\n   *  {{!< ../layouts/default.html}}  # default.html in parent layout directory\n   */\n\n  function parseLayout(str, filename, cb) {\n    var layoutFile = self.declaredLayoutFile(str, filename);\n\n    if (layoutFile) {\n      self.cacheLayout(layoutFile, options.cache, cb);\n    } else {\n      cb(null, null);\n    }\n  }\n  /**\n   * Renders `template` with given `locals` and calls `cb` with the\n   * resulting HTML string.\n   *\n   * @param template\n   * @param locals\n   * @param cb\n   */\n\n\n  function renderTemplate(template, locals, cb) {\n    var res;\n\n    try {\n      var localTemplateOptions = self.getLocalTemplateOptions(locals);\n\n      var localsClone = _.extend({}, locals);\n\n      self.updateLocalTemplateOptions(localsClone, undefined);\n      res = template(localsClone, _.merge({}, self._options.templateOptions, localTemplateOptions));\n    } catch (err) {\n      if (err.message) {\n        err.message = '[' + template.__filename + '] ' + err.message;\n      } else if (typeof err === 'string') {\n        return cb('[' + template.__filename + '] ' + err, null);\n      }\n\n      return cb(err, null);\n    }\n\n    cb(null, res);\n  }\n  /**\n   * Renders `template` with an optional set of nested `layoutTemplates` using\n   * data in `locals`.\n   */\n\n\n  function render(template, locals, layoutTemplates, cb) {\n    if (!layoutTemplates) layoutTemplates = []; // We'll render templates from bottom to top of the stack, each template\n    // being passed the rendered string of the previous ones as `body`\n\n    var i = layoutTemplates.length - 1;\n\n    var _stackRenderer = function (err, htmlStr) {\n      if (err) return cb(err);\n\n      if (i >= 0) {\n        locals.body = htmlStr;\n        renderTemplate(layoutTemplates[i--], locals, _stackRenderer);\n      } else {\n        cb(null, htmlStr);\n      }\n    }; // Start the rendering with the innermost page template\n\n\n    renderTemplate(template, locals, _stackRenderer);\n  }\n  /**\n   * Lazy loads js-beautify, which should not be used in production env.\n   */\n\n\n  function loadBeautify() {\n    if (!self.beautify) {\n      self.beautify = require('js-beautify').html;\n      var rc = path.join(process.cwd(), '.jsbeautifyrc');\n\n      if (fs.existsSync(rc)) {\n        self.beautifyrc = JSON.parse(fs.readFileSync(rc, 'utf8'));\n      }\n    }\n  }\n  /**\n   * Gets the source and compiled template for filename either from the cache\n   * or compiling it on the fly.\n   */\n\n\n  function getSourceTemplate(cb) {\n    if (options.cache) {\n      var info = self.cache[filename];\n\n      if (info) {\n        return cb(null, info.source, info.template);\n      }\n    }\n\n    fs.readFile(filename, 'utf8', function (err, source) {\n      if (err) return cb(err);\n      var template = self.compile(source, filename);\n\n      if (options.cache) {\n        self.cache[filename] = {\n          source: source,\n          template: template\n        };\n      }\n\n      return cb(null, source, template);\n    });\n  }\n  /**\n   * Compiles a file into a template and a layoutTemplate, then renders it above.\n   */\n\n\n  function compileFile(locals, cb) {\n    getSourceTemplate(function (err, source, template) {\n      if (err) return cb(err); // Try to get the layout\n\n      parseLayout(source, filename, function (err, layoutTemplates) {\n        if (err) return cb(err);\n\n        function renderIt(layoutTemplates) {\n          if (self._options.beautify) {\n            return render(template, locals, layoutTemplates, function (err, html) {\n              if (err) return cb(err);\n              loadBeautify();\n              return cb(null, self.beautify(html, self.beautifyrc));\n            });\n          }\n\n          return render(template, locals, layoutTemplates, cb);\n        } // Determine which layout to use\n\n\n        if (typeof options.layout !== 'undefined' && !options.layout) {\n          // If options.layout is falsy, behave as if no layout should be used - suppress defaults\n          renderIt(null);\n        } else if (layoutTemplates) {\n          // 1. Layout specified in template\n          renderIt(layoutTemplates);\n        } else if (typeof options.layout !== 'undefined' && options.layout) {\n          // 2. Layout specified by options from render\n          var layoutFile = self.layoutPath(filename, options.layout);\n          self.cacheLayout(layoutFile, options.cache, function (err, layoutTemplates) {\n            if (err) return cb(err);\n            renderIt(layoutTemplates);\n          });\n        } else if (self.defaultLayoutTemplates) {\n          // 3. Default layout specified when middleware was configured.\n          renderIt(self.defaultLayoutTemplates);\n        } else {\n          // render without a template\n          renderIt(null);\n        }\n      });\n    });\n  }\n\n  function replaceValue(values, text) {\n    if (typeof text === 'string') {\n      Object.keys(values).forEach(function (id) {\n        text = text.replace(id, function () {\n          return values[id];\n        });\n        text = text.replace(self.Utils.escapeExpression(id), function () {\n          return self.Utils.escapeExpression(values[id]);\n        });\n      });\n    }\n\n    return text;\n  } // Handles waiting for async helpers\n\n\n  function handleAsync(err, res) {\n    if (err) return cb(err);\n    resolver.done(options.resolverCache, function (err, values) {\n      if (err) return cb(err);\n      Object.keys(values).forEach(function (key) {\n        values[key] = replaceValue(values, values[key]);\n      });\n      res = replaceValue(values, res);\n\n      if (resolver.hasResolvers(res)) {\n        return handleAsync(null, res);\n      }\n\n      cb(null, res);\n    });\n  } // kick it off by loading default template (if any)\n\n\n  this.loadDefaultLayout(options.cache, function (err) {\n    if (err) return cb(err); // Force reloading of all partials if caching is not used. Inefficient but there\n    // is no loading partial event.\n\n    if (self.partialsDir && (!options.cache || !self.isPartialCachingComplete)) {\n      return self.cachePartials(function (err) {\n        if (err) return cb(err);\n        return compileFile(options, handleAsync);\n      });\n    }\n\n    return compileFile(options, handleAsync);\n  });\n};\n\nmodule.exports = new ExpressHbs();","map":{"version":3,"sources":["/Users/arif/node_modules/express-hbs/lib/hbs.js"],"names":["fs","require","path","readdirp","handlebars","resolver","_","layoutPattern","ExpressHbs","create","SafeString","Utils","beautify","beautifyrc","cwd","process","prototype","content","name","options","context","block","data","root","blockCache","push","fn","layoutPath","filename","layout","dirs","dirname","layoutsDir","viewsDir","concat","forEach","dir","resolve","declaredLayoutFile","str","matches","match","cacheLayout","layoutFile","useCache","cb","self","extname","_options","layoutTemplates","cache","readFile","err","parentLayoutFile","_returnLayouts","layouts","currentLayout","slice","compile","parentLayouts","cachePartials","partialsDir","Array","count","readNext","fileFilter","on","console","warn","error","entry","source","readFileSync","fullPath","basename","split","join","registerPartial","length","isPartialCachingComplete","express3","contentHelperName","blockHelperName","templateOptions","onCompile","i18n","registerHelper","args","call","arguments","pop","__","apply","__n","val","undefined","isArray","viewsDirOpt","defaultLayoutTemplates","___express","bind","express4","loadDefaultLayout","defaultLayout","templates","Error","indexOf","compiled","__filename","relative","replace","sep","registerAsyncHelper","resolverCache","get","resolveFunc","arr","getTemplateOptions","updateTemplateOptions","getLocalTemplateOptions","locals","_templateOptions","updateLocalTemplateOptions","localTemplateOptions","settings","views","parseLayout","renderTemplate","template","res","localsClone","extend","merge","message","render","i","_stackRenderer","htmlStr","body","loadBeautify","html","rc","existsSync","JSON","parse","getSourceTemplate","info","compileFile","renderIt","replaceValue","values","text","Object","keys","id","escapeExpression","handleAsync","done","key","hasResolvers","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar fs = require('fs');\nvar path = require('path');\nvar readdirp = require('readdirp');\nvar handlebars = require('handlebars');\nvar resolver = require('./resolver');\nvar _ = require('lodash');\n\n/**\n * Regex pattern for layout directive. {{!< layout }}\n */\nvar layoutPattern = /{{!<\\s+([A-Za-z0-9\\._\\-\\/]+)\\s*}}/;\n\n/**\n * Constructor\n */\nvar ExpressHbs = function() {\n  this.handlebars = handlebars.create();\n  this.SafeString = this.handlebars.SafeString;\n  this.Utils = this.handlebars.Utils;\n  this.beautify = null;\n  this.beautifyrc = null;\n  this.cwd = process.cwd();\n};\n\n/**\n * Defines content for a named block declared in layout.\n *\n * @example\n *\n * {{#contentFor \"pageStylesheets\"}}\n * <link rel=\"stylesheet\" href='{{{URL \"css/style.css\"}}}' />\n * {{/contentFor}}\n */\nExpressHbs.prototype.content = function(name, options, context) {\n  var block = options.data.root.blockCache[name] || (options.data.root.blockCache[name] = []);\n  block.push(options.fn(context));\n};\n\n/**\n * Returns the layout filepath given the template filename and layout used.\n * Backward compatible with specifying layouts in locals like 'layouts/foo',\n * but if you have specified a layoutsDir you can specify layouts in locals with just the layout name.\n *\n * @param {String} filename Path to template file.\n * @param {String} layout Layout path.\n */\nExpressHbs.prototype.layoutPath = function(filename, layout) {\n  var dirs,\n    layoutPath;\n  if (layout[0] === '.') {\n    dirs = path.dirname(filename);\n  } else if (this.layoutsDir) {\n    dirs = this.layoutsDir;\n  } else {\n    dirs = this.viewsDir;\n  }\n  [].concat(dirs).forEach(function (dir) {\n    if (!layoutPath) {\n      layoutPath = path.resolve(dir, layout);\n    }\n  });\n  return layoutPath;\n};\n\n/**\n * Find the path of the declared layout in `str`, if any\n *\n * @param  {String} str The template string to parse\n * @param {String} filename Path to template\n * @returns {String|undefined} Returns the path to layout.\n */\nExpressHbs.prototype.declaredLayoutFile = function(str, filename) {\n  var matches = str.match(layoutPattern);\n  if (matches) {\n    var layout = matches[1];\n    // behave like `require`, if '.' then relative, else look in\n    // usual location (layoutsDir)\n    if (this.layoutsDir && layout[0] !== '.') {\n      layout = path.resolve(this.layoutsDir, layout);\n    }\n    return path.resolve(path.dirname(filename), layout);\n  }\n};\n\n/**\n * Compiles a layout file.\n *\n * The function checks whether the layout file declares a parent layout.\n * If it does, the parent layout is loaded recursively and checked as well\n * for a parent layout, and so on, until the top layout is reached.\n * All layouts are then returned as a stack to the caller via the callback.\n *\n * @param {String}      layoutFile  The path to the layout file to compile\n * @param {Boolean}     useCache    Cache the compiled layout?\n * @param {Function}    cb          Callback called with layouts stack\n */\nExpressHbs.prototype.cacheLayout = function(layoutFile, useCache, cb) {\n  var self = this;\n\n  // assume hbs extension\n  if (path.extname(layoutFile) === '') layoutFile += this._options.extname;\n\n  // path is relative in directive, make it absolute\n  var layoutTemplates = this.cache[layoutFile];\n  if (layoutTemplates) return cb(null, layoutTemplates);\n\n  fs.readFile(layoutFile, 'utf8', function(err, str) {\n    if (err) return cb(err);\n\n    //  File path of eventual declared parent layout\n    var parentLayoutFile = self.declaredLayoutFile(str, layoutFile);\n\n    // This function returns the current layout stack to the caller\n    var _returnLayouts = function(layouts) {\n      var currentLayout;\n      layouts = layouts.slice(0);\n      currentLayout = self.compile(str, layoutFile);\n      layouts.push(currentLayout);\n      if (useCache) {\n        self.cache[layoutFile] = layouts.slice(0);\n      }\n      cb(null, layouts);\n    };\n\n    if (parentLayoutFile) {\n      // Recursively compile/cache parent layouts\n      self.cacheLayout(parentLayoutFile, useCache, function(err, parentLayouts) {\n        if (err) return cb(err);\n        _returnLayouts(parentLayouts);\n      });\n    } else {\n      // No parent layout: return current layout with an empty stack\n      _returnLayouts([]);\n    }\n  });\n};\n\n/**\n * Cache partial templates found under directories configure in partialsDir.\n */\nExpressHbs.prototype.cachePartials = function(cb) {\n  var self = this;\n\n  if (!(this.partialsDir instanceof Array)) {\n    this.partialsDir = [this.partialsDir];\n  }\n\n  // Use to iterate all folder in series\n  var count = 0;\n\n  function readNext() {\n    readdirp(self.partialsDir[count], {fileFilter: '*' + self._options.extname})\n    .on('warn', function(err) {\n      console.warn('Non-fatal error in express-hbs cachePartials.', err);\n    })\n    .on('error', function(err) {\n      console.error('Fatal error in express-hbs cachePartials', err);\n      return cb(err);\n    })\n    .on('data', function(entry) {\n      if (!entry) return;\n      var source = fs.readFileSync(entry.fullPath, 'utf8');\n      var dirname = path.dirname(entry.path);\n      dirname = dirname === '.' ? '' : dirname + '/';\n\n      var name = dirname + path.basename(entry.basename, self._options.extname);\n      // fix the path in windows\n      name = name.split('\\\\').join('/');\n      self.registerPartial(name, source, entry.fullPath);\n    })\n    .on('end', function() {\n      count += 1;\n\n      // If all directories aren't read, read the next directory\n      if (count < self.partialsDir.length) {\n        readNext();\n      } else {\n        self.isPartialCachingComplete = true;\n        if (cb) cb(null, true);\n      }\n    });\n  }\n\n  readNext();\n};\n\n/**\n * Express 3.x template engine compliance.\n *\n * @param {Object} options = {\n *   handlebars: \"override handlebars\",\n *   defaultLayout: \"path to default layout\",\n *   partialsDir: \"absolute path to partials (one path or an array of paths)\",\n *   layoutsDir: \"absolute path to the layouts\",\n *   extname: \"extension to use\",\n *   contentHelperName: \"contentFor\",\n *   blockHelperName: \"block\",\n *   beautify: \"{Boolean} whether to pretty print HTML\",\n *   onCompile: function(self, source, filename) {\n *       return self.handlebars.compile(source);\n *   }\n * }\n */\nExpressHbs.prototype.express3 = function(options) {\n  var self = this;\n\n  // Set defaults\n  if (!options) options = {};\n  if (!options.extname) options.extname = '.hbs';\n  if (!options.contentHelperName) options.contentHelperName = 'contentFor';\n  if (!options.blockHelperName) options.blockHelperName = 'block';\n  if (!options.templateOptions) options.templateOptions = {};\n  if (options.handlebars) this.handlebars = options.handlebars;\n  if (options.onCompile) this.onCompile = options.onCompile;\n\n  this._options = options;\n  if (this._options.handlebars) this.handlebars = this._options.handlebars;\n\n  if (options.i18n) {\n    var i18n = options.i18n;\n    this.handlebars.registerHelper('__', function() {\n      var args = Array.prototype.slice.call(arguments);\n      var options = args.pop();\n      return i18n.__.apply(options.data.root, args);\n    });\n    this.handlebars.registerHelper('__n', function() {\n      var args = Array.prototype.slice.call(arguments);\n      var options = args.pop();\n      return i18n.__n.apply(options.data.root, args);\n    });\n  }\n\n  this.handlebars.registerHelper(this._options.blockHelperName, function(name, options) {\n    var val = options.data.root.blockCache[name];\n    if (val === undefined && typeof options.fn === 'function') {\n      val = options.fn(this);\n    }\n    if (Array.isArray(val)) {\n      val = val.join('\\n'); \n    }\n    return val;\n  });\n\n  // Pass 'this' as context of helper function to don't lose context call of helpers.\n  this.handlebars.registerHelper(this._options.contentHelperName, function(name, options) {\n    return self.content(name, options, this);\n  });\n\n  // Absolute path to partials directory.\n  this.partialsDir = this._options.partialsDir;\n\n  // Absolute path to the layouts directory\n  this.layoutsDir = this._options.layoutsDir;\n\n  // express passes this through ___express func, gulp pass in an option\n  this.viewsDir = null;\n  this.viewsDirOpt = this._options.viewsDir;\n\n  // Cache for templates, express 3.x doesn't do this for us\n  this.cache = {};\n\n  // Holds the default compiled layout if specified in options configuration.\n  this.defaultLayoutTemplates = null;\n\n  // Keep track of if partials have been cached already or not.\n  this.isPartialCachingComplete = false;\n\n  return this.___express.bind(this);\n};\n\n/**\n * Express 4.x template engine compliance.\n *\n * @param {Object} options = {\n *   handlebars: \"override handlebars\",\n *   defaultLayout: \"path to default layout\",\n *   partialsDir: \"absolute path to partials (one path or an array of paths)\",\n *   layoutsDir: \"absolute path to the layouts\",\n *   extname: \"extension to use\",\n *   contentHelperName: \"contentFor\",\n *   blockHelperName: \"block\",\n *   beautify: \"{Boolean} whether to pretty print HTML\"\n * }\n */\nExpressHbs.prototype.express4 = ExpressHbs.prototype.express3;\n\n/**\n * Tries to load the default layout.\n *\n * @param {Boolean} useCache Whether to cache.\n */\nExpressHbs.prototype.loadDefaultLayout = function(useCache, cb) {\n  var self = this;\n  if (!this._options.defaultLayout) return cb();\n  if (useCache && this.defaultLayoutTemplates) return cb(null, this.defaultLayoutTemplates);\n\n  this.cacheLayout(this._options.defaultLayout, useCache, function(err, templates) {\n    if (err) return cb(err);\n    self.defaultLayoutTemplates = templates.slice(0);\n    return cb(null, templates);\n  });\n};\n\n/**\n * Expose useful methods.\n */\nExpressHbs.prototype.registerHelper = function(name, fn) {\n  this.handlebars.registerHelper(name, fn);\n};\n\n/**\n * Registers a partial.\n *\n * @param {String} name The name of the partial as used in a template.\n * @param {String} source String source of the partial.\n */\nExpressHbs.prototype.registerPartial = function(name, source, filename) {\n  this.handlebars.registerPartial(name, this.compile(source, filename));\n};\n\n/**\n * Compiles a string.\n *\n * @param {String} source The source to compile.\n * @param {String} filename The path used to embed into __filename for errors.\n */\nExpressHbs.prototype.compile = function(source, filename) {\n  // Handlebars has a bug with comment only partial causes errors. This must\n  // be a string so the block below can add a space.\n  if (typeof source !== 'string') {\n    throw new Error('registerPartial must be a string for empty comment workaround');\n  }\n  if (source.indexOf('}}') === source.length - 2) {\n    source += ' ';\n  }\n\n  var compiled;\n  if (this.onCompile) {\n    compiled = this.onCompile(this, source, filename);\n  } else {\n    compiled = this.handlebars.compile(source);\n  }\n\n  if (filename) {\n    if (Array.isArray(this.viewsDir) && this.viewsDir.length > 0) {\n      compiled.__filename = path.relative(this.cwd, filename).replace(path.sep, '/');\n    } else {\n      compiled.__filename = path.relative(this.viewsDir || '', filename).replace(path.sep, '/');\n    }\n  }\n  return compiled;\n};\n\n/**\n * Registers an asynchronous helper.\n *\n * @param {String} name The name of the partial as used in a template.\n * @param {String} fn The `function(options, cb)`\n */\nExpressHbs.prototype.registerAsyncHelper = function(name, fn) {\n  this.handlebars.registerHelper(name, function(context, options) {\n    var resolverCache = this.resolverCache ||\n      _.get(context, 'data.root.resolverCache') ||\n      _.get(options, 'data.root.resolverCache');\n    if (!resolverCache) {\n      throw new Error('Could not find resolver cache in async helper ' + name + '.');\n    }\n    if (options && fn.length > 2) {\n      var resolveFunc = function(arr, cb) {\n        return fn.call(this, arr[0], arr[1], cb);\n      };\n\n      return resolver.resolve(\n        resolverCache,\n        resolveFunc.bind(this),\n        [context, options]\n      );\n    }\n    return resolver.resolve(\n      resolverCache,\n      fn.bind(this),\n      context\n    );\n  });\n};\n\nExpressHbs.prototype.getTemplateOptions = function() {\n  return this._options.templateOptions;\n};\n\nExpressHbs.prototype.updateTemplateOptions = function(templateOptions) {\n  this._options.templateOptions = templateOptions;\n};\n\nExpressHbs.prototype.getLocalTemplateOptions = function(locals) {\n  return locals._templateOptions || {};\n};\n\nExpressHbs.prototype.updateLocalTemplateOptions = function(locals, localTemplateOptions) {\n  return locals._templateOptions = localTemplateOptions;\n};\n\n/**\n * Creates a new instance of ExpressHbs.\n */\nExpressHbs.prototype.create = function() {\n  return new ExpressHbs();\n};\n\n/**\n * express 3.x, 4.x template engine compliance\n *\n * @param {String} filename Full path to template.\n * @param {Object} options Is the context or locals for templates. {\n *  {Object} settings - subset of Express settings, `settings.views` is\n *                      the views directory\n * }\n * @param {Function} cb The callback expecting the rendered template as a string.\n *\n * @example\n *\n * Example options from express\n *\n *      {\n *        settings: {\n *           'x-powered-by': true,\n *           env: 'production',\n *           views: '/home/coder/barc/code/express-hbs/example/views',\n *           'jsonp callback name': 'callback',\n *           'view cache': true,\n *           'view engine': 'hbs'\n *         },\n *         cache: true,\n *\n *         // the rest are app-defined locals\n *         title: 'My favorite veggies',\n *         layout: 'layout/veggie'\n *       }\n */\nExpressHbs.prototype.___express = function ___express(filename, source, options, cb) {\n  // support running as a gulp/grunt filter outside of express\n  if (arguments.length === 3) {\n    cb = options;\n    options = source;\n    source = null;\n  }\n\n  options.blockCache = {};\n  options.resolverCache = {};\n\n  this.viewsDir = options.settings.views || this.viewsDirOpt;\n  var self = this;\n\n  /**\n   * Allow a layout to be declared as a handlebars comment to remain spec\n   * compatible with handlebars.\n   *\n   * Valid directives\n   *\n   *  {{!< foo}}                      # foo.hbs in same directory as template\n   *  {{!< ../layouts/default}}       # default.hbs in parent layout directory\n   *  {{!< ../layouts/default.html}}  # default.html in parent layout directory\n   */\n  function parseLayout(str, filename, cb) {\n    var layoutFile = self.declaredLayoutFile(str, filename);\n    if (layoutFile) {\n      self.cacheLayout(layoutFile, options.cache, cb);\n    } else {\n      cb(null, null);\n    }\n  }\n\n  /**\n   * Renders `template` with given `locals` and calls `cb` with the\n   * resulting HTML string.\n   *\n   * @param template\n   * @param locals\n   * @param cb\n   */\n  function renderTemplate(template, locals, cb) {\n    var res;\n\n    try {\n      var localTemplateOptions = self.getLocalTemplateOptions(locals);\n      var localsClone = _.extend({}, locals);\n      self.updateLocalTemplateOptions(localsClone, undefined);\n      res = template(localsClone, _.merge({}, self._options.templateOptions, localTemplateOptions));\n    } catch (err) {\n      if (err.message) {\n        err.message = '[' + template.__filename + '] ' + err.message;\n      } else if (typeof err === 'string') {\n        return cb('[' + template.__filename + '] ' + err, null);\n      }\n      return cb(err, null);\n    }\n    cb(null, res);\n  }\n\n\n  /**\n   * Renders `template` with an optional set of nested `layoutTemplates` using\n   * data in `locals`.\n   */\n  function render(template, locals, layoutTemplates, cb) {\n    if (!layoutTemplates) layoutTemplates = [];\n\n    // We'll render templates from bottom to top of the stack, each template\n    // being passed the rendered string of the previous ones as `body`\n    var i = layoutTemplates.length - 1;\n\n    var _stackRenderer = function(err, htmlStr) {\n      if (err) return cb(err);\n\n      if (i >= 0) {\n        locals.body = htmlStr;\n        renderTemplate(layoutTemplates[i--], locals, _stackRenderer);\n      } else {\n        cb(null, htmlStr);\n      }\n    };\n\n    // Start the rendering with the innermost page template\n    renderTemplate(template, locals, _stackRenderer);\n  }\n\n\n  /**\n   * Lazy loads js-beautify, which should not be used in production env.\n   */\n  function loadBeautify() {\n    if (!self.beautify) {\n      self.beautify = require('js-beautify').html;\n      var rc = path.join(process.cwd(), '.jsbeautifyrc');\n      if (fs.existsSync(rc)) {\n        self.beautifyrc = JSON.parse(fs.readFileSync(rc, 'utf8'));\n      }\n    }\n  }\n\n  /**\n   * Gets the source and compiled template for filename either from the cache\n   * or compiling it on the fly.\n   */\n  function getSourceTemplate(cb) {\n    if (options.cache) {\n      var info = self.cache[filename];\n      if (info) {\n        return cb(null, info.source, info.template);\n      }\n    }\n\n    fs.readFile(filename, 'utf8', function(err, source) {\n      if (err) return cb(err);\n\n      var template = self.compile(source, filename);\n      if (options.cache) {\n        self.cache[filename] = {\n          source: source,\n          template: template\n        };\n      }\n      return cb(null, source, template);\n    });\n  }\n\n  /**\n   * Compiles a file into a template and a layoutTemplate, then renders it above.\n   */\n  function compileFile(locals, cb) {\n    getSourceTemplate(function(err, source, template) {\n      if (err) return cb(err);\n\n      // Try to get the layout\n      parseLayout(source, filename, function(err, layoutTemplates) {\n        if (err) return cb(err);\n\n        function renderIt(layoutTemplates) {\n          if (self._options.beautify) {\n            return render(template, locals, layoutTemplates, function(err, html) {\n              if (err) return cb(err);\n              loadBeautify();\n              return cb(null, self.beautify(html, self.beautifyrc));\n            });\n          }\n          return render(template, locals, layoutTemplates, cb);\n        }\n\n        // Determine which layout to use\n\n        if (typeof options.layout !== 'undefined' && !options.layout) {\n          // If options.layout is falsy, behave as if no layout should be used - suppress defaults\n          renderIt(null);\n        } else if (layoutTemplates) {\n          // 1. Layout specified in template\n          renderIt(layoutTemplates);\n        } else if (typeof options.layout !== 'undefined' && options.layout) {\n          // 2. Layout specified by options from render\n          var layoutFile = self.layoutPath(filename, options.layout);\n          self.cacheLayout(layoutFile, options.cache, function(err, layoutTemplates) {\n            if (err) return cb(err);\n            renderIt(layoutTemplates);\n          });\n        } else if (self.defaultLayoutTemplates) {\n          // 3. Default layout specified when middleware was configured.\n          renderIt(self.defaultLayoutTemplates);\n        } else {\n          // render without a template\n          renderIt(null);\n        }\n      });\n    });\n  }\n\n  function replaceValue(values, text) {\n    if (typeof text === 'string') {\n      Object.keys(values).forEach(function(id) {\n        text = text.replace(id, function() {\n          return values[id];\n        });\n        text = text.replace(self.Utils.escapeExpression(id), function() {\n          return self.Utils.escapeExpression(values[id]);\n        });\n      });\n    }\n    return text;\n  }\n\n  // Handles waiting for async helpers\n  function handleAsync(err, res) {\n    if (err) return cb(err);\n    resolver.done(options.resolverCache, function(err, values) {\n      if (err) return cb(err);\n      Object.keys(values).forEach(function(key) {\n        values[key] = replaceValue(values, values[key]);\n      });\n      res = replaceValue(values, res);\n      if (resolver.hasResolvers(res)) {\n        return handleAsync(null, res);\n      }\n      cb(null, res);\n    });\n  }\n\n  // kick it off by loading default template (if any)\n  this.loadDefaultLayout(options.cache, function(err) {\n    if (err) return cb(err);\n\n    // Force reloading of all partials if caching is not used. Inefficient but there\n    // is no loading partial event.\n    if (self.partialsDir && (!options.cache || !self.isPartialCachingComplete)) {\n      return self.cachePartials(function(err) {\n        if (err) return cb(err);\n        return compileFile(options, handleAsync);\n      });\n    }\n\n    return compileFile(options, handleAsync);\n  });\n};\n\nmodule.exports = new ExpressHbs();\n"]},"metadata":{},"sourceType":"script"}