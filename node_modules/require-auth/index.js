'use strict';

module.exports.init = function (nameSpace) {
  return function (req, res, next) {
    if (req.user && nameSpace) {
      var groups = nameSpace + '/groups';
      var roles = nameSpace + '/roles';
      var permissions = nameSpace + '/permissions';
      if (req.user[groups]) req.groups = req.user[groups];
      if (req.user[roles]) req.roles = req.user[roles];
      if (req.user[permissions]) req.permissions = req.user[permissions];
    }
    next();
  };
};

module.exports.group = function (groupsAllowed) {
  return function (req, res, next) {
    var groups = req.groups;
    if (!groups) return res.status(401).send("Not authorized, group empty");
    if (!groupsAllowed) return next();

    if (Array.isArray(groupsAllowed)) {
      var found = groups.some(function (r) {
        return groupsAllowed.includes(r);
      });
      if (!found) return res.status(401).send("Group missing");
    }
    else if (typeof groupsAllowed === 'string' || groupsAllowed instanceof String) {
      if (groups.indexOf(groupsAllowed) === -1) return res.status(401).send("Group missing");
    }

    return next();
  };
};
module.exports.role = function (rolesAllowed) {
  return function (req, res, next) {
    var roles = req.roles;
    if (!roles) return res.status(401).send("Not authorized, roles empty");
    if (!rolesAllowed) return next();

    if (Array.isArray(rolesAllowed)) {
      var found = roles.some(function (r) {
        return rolesAllowed.includes(r);
      });
      if (!found) return res.status(401).send("Role missing");
    }
    else if (typeof rolesAllowed === 'string' || rolesAllowed instanceof String) {
      if (roles.indexOf(rolesAllowed) === -1) return res.status(401).send("Role missing");
    }

    return next();
  };
};

module.exports.permission = function (permissionsAllowed) {
  return function (req, res, next) {
    var permissions = req.permissions;
    if (!permissions) return res.status(401).send("Not authorized, permissions empty" +permissions);
    if (!permissionsAllowed) return next();

    if (Array.isArray(permissionsAllowed)) {
      var found = permissions.some(function (r) {
        return permissionsAllowed.includes(r);
      });
      if (!found) return res.status(401).send("Permission missing");
    }
    else if (typeof permissionsAllowed === 'string' || permissionsAllowed instanceof String) {
      if (permissions.indexOf(permissionsAllowed) === -1) return res.status(401).send("Permission missing");
    }

    return next();
  };
};